public with sharing class RestructureTxnEditController extends TransactionControllerBase{

    public Transaction_Processing_Queue__c mRestructureTxn {get; set;}
    public List<QueuedTransactionParamObject> mTxnParamObjectList {get; set;}
    
    private TransactionSetupObject mTxnSetupObject;
    private Boolean mIsRedirect;
    private PageReference mRedirectPage;
    
    public Boolean mIsPreviewed {get; private set;}
    
    public RestructureTxnEditController(ApexPages.StandardController pStdController){
        super();
        mRestructureTxn = (Transaction_Processing_Queue__c)pStdController.getRecord();
        init();
    }
    
    private void init(){
        if (mRestructureTxn.Id != null){
            mRestructureTxn = (Transaction_Processing_Queue__c) fsCore.SObjectQueryUtil.getSObjectRecord(mRestructureTxn.Id);
        }
        
        Map<String,String> pageURLParamMap = ApexPages.currentPage().getParameters();
        mTxnParamObjectList = new List<QueuedTransactionParamObject>();
        mIsRedirect = false;
        mIsPreviewed = false;
        
        //get contract Id
        Id contractId = null;
        if (pageURLParamMap.containsKey('parentId')){
            contractId = Id.valueOf(pageURLParamMap.get('parentId'));
        }
        else if (mRestructureTxn.Lending_Contract_Number__c != null){
            contractId = mRestructureTxn.Lending_Contract_Number__c;
        } 
        else {
            throw new ServicingException(Label.Parent_Contract_Id_Missing);
        }

        setLendingContract(LendingContractUtil.getLendingContract(contractId));
        setContractStages(getLendingContract().Id);
        setContractAssignments(getLendingContract().Id);
        setBusinessDate(getLendingContract().Branch_Code__c);
        setPageTitle(getLendingContract().Name);
        
        //get transaction code
        String txnCode = Constants.BLANK_STRING;
        if (pageURLParamMap.containsKey('txnCode')){
            txnCode = pageURLParamMap.get('txnCode');
        } 
        else if (mRestructureTxn.Id != null && String.IsNotBlank(mRestructureTxn.Transaction_Code__c)){
            txnCode = mRestructureTxn.Transaction_Code__c;
        }
        
        //redirect to select transaction screen if transaction code is not found
        if (String.IsBlank(txnCode)) {
            mIsRedirect = true;
            mRedirectPage = getNewTransactionPage();
            mRedirectPage.getParameters().put('Id', contractId);
        }
        else {
            setTransactionCategory(Constants.TRANSACTION_CATEGORY_RESTRUCTURE);
            setAvailableTransactions();
            if (!isTransactionAccessible(txnCode)){
                throw new ServicingException(Label.Transaction_Not_Accessible);
            }
            
            mTxnSetupObject = getAvailableTransactions().get(txnCode);

            if (mRestructureTxn.Id == null){
                setPageSubtitle(Label.Restructure_contract_title);
            } else {
                setPageSubtitle(Label.Restructure_contract_title + ' (#' + mRestructureTxn.Name + ')');
            }
            setRestructureTxnDetails();
        }
    }        

    public PageReference onLoad(){
        if (mIsRedirect && mRedirectPage != null){
            mRedirectPage.setRedirect(true);
            return mRedirectPage;
        }
        return null;
    }
    
    private void setRestructureTxnDetails(){
        if (mRestructureTxn.Id == null){
            mRestructureTxn = new Transaction_Processing_Queue__c();
            mRestructureTxn.Lending_Contract_Number__c = getLendingContract().Id;
            mRestructureTxn.Transaction_Date__c = getBusinessDate();
            mRestructureTxn.Transaction_Name__c = mTxnSetupObject.mTransactionId;
            mRestructureTxn.Transaction_Operation_Type__c = mTxnSetupObject.mOperationType;
            mRestructureTxn.Processing_User__c = UserInfo.getUserId();
        }
        
        mTxnParamObjectList = QueuedTransactionParamUtil.getParameterObjectList(mRestructureTxn, mTxnSetupObject);
    }
    
    private Boolean isTransactionValid(){
        Boolean isValid = true;
        if (!mIsPreviewed){
            isValid = false;
            addErrorToPage(Label.Transaction_Preview_Before_Save_Or_Post);
        }
        return isValid;
    }
    
    public PageReference onPreview(){
        mIsPreviewed = true;
        return null;
    }

    public PageReference onSaveAsDraft(){
        if (!isTransactionValid()){
            return null;
        }
        return null;
    }

    public PageReference onPostTxn(){
        if (!isTransactionValid()){
            return null;
        }
        return null;
    }

    public PageReference onCancel(){
        return (mRestructureTxn.Id == null ? getContractRecordPage() : getRecordPage(mRestructureTxn.Id));
    }
    
}
